#+title: Visualización de series de tiempo {{{newline}}} en Python
#+author: {{{erika}}}{{{newline}}} {{{margarita}}}{{{newline}}} {{{rafael}}}{{{newline}}}
#+date: @@latex:\protect\tiny@@ 6 de julio de 2017

#+macro: newline @@latex:\\[0.6em]@@ @@html:<br>@@
#+macro: aamf Área Académica de Matemáticas y Física
#+macro: rafael Rafael Villarroel Flores
#+macro: rvf {{{rafael}}}\footnote{ {{{rafael}}}. Profesor Investigador del {{{aamf}}}. Autor de correspondencia. Correo electrónico: rafaelv@uaeh.edu.mx}
#+macro: erika Erika Elizabeth Rodríguez Torres
#+macro: eert {{{erika}}}\footnote{ {{{erika}}}. Profesora Investigadora del {{{aamf}}}. Correo electrónico: erikart@uaeh.edu.mx}
#+macro: margarita Margarita Tetlalmatzi Montiel
#+macro: mtm {{{margarita}}}\footnote{ {{{margarita}}}. Profesora Investigadora del {{{aamf}}}. Correo electrónico: tmontiel@uaeh.edu.mx}

#+property: header-args :tangle yes :cache yes

#+language: es

#+options: ':t toc:nil H:2

#+latex_class: beamer-talk
#+startup: beamer
#+beamer_theme: metropolis [numbering=none, block=fill]

#+latex_header: \usepackage{xcolor}
#+latex_header: \usepackage{url}

#+latex_header: \usepackage{listings}
#+latex_header: \lstset{
#+latex_header:   literate={í}{{\'\i}}1
#+latex_header:            {á}{{\'a}}1
#+latex_header:            {é}{{\'e}}1
#+latex_header:            {ó}{{\'o}}1
#+latex_header:            {ú}{{\'u}}1
#+latex_header: }
#+latex_header: \lstalias{ipython}{python}

#+beamer_header: \languagepath{spanish}
#+beamer_header: \beamerdefaultoverlayspecification{<+->}

* Introducción

** Series de tiempo

   - Una /serie de tiempo/ es una sucesión de datos \(X=\{x_{t}\}\),
     donde la variable \(t\) toma valores uniformemente espaciados en
     el tiempo. El valor \(x_{t}\) se interpreta como el valor que toma una
     cantidad a estudiar en el tiempo \(t\).
   - En este trabajo para simplificar la discusión, supondremos sin
     perder generalidad que la variable \(t\) toma valores en los
     enteros no negativos: \(0,1,2,3,\ldots\).

** Python

   - /Python/ es un lenguaje de programación moderno, el cual puede
     obtenerse legalmente de internet de manera gratuita. El lenguaje
     /Python/ se presta de manera natural a las aplicaciones a la
     ciencia.

   #+beamer: \pause

   - En este trabajo mostraremos el uso de sus librerías =matplotlib=
     (la cual sirve para producir dibujos científicos) y =networkx=
     (la cual ayuda a manipular y dibujar redes complejas).

** =matplotlib=

   Como primer ejemplo, mostramos el código para producir una
   representación gráfica de la serie de tiempo =[2,3,10,2,4,5]=,
   usando =matplotlib=.

   #+call: inicio-mp(diam="0.485")

   #+name: simple01
   #+ATTR_LATEX: :options basicstyle=\scriptsize\ttfamily
   #+BEGIN_SRC ipython :session :file ./simple.png :exports both
import matplotlib.pyplot as plt
y=[2,3,10,2,4,5]
plt.grid(True)
plt.plot(y)
plt.show()
   #+END_SRC

   #+call: enmedio-mp(ndiam="0.5")

   #+RESULTS[3052e122f910ca3fd6a299bf1c3d8572fd2f0444]: simple01
   [[file:./simple.png]]

   #+call: final-mp(labl="simple2", capt="")
   
** Gráfica de visibilidad 

   En la última parte de esta presentación, utilizaremos el concepto
   de gráfica de visibilidad para proporcionarnos un ejemplo no
   trivial del uso de /Python/.

* El lenguaje Python

** Instalación

   - El lenguaje /Python/ puede descargarse de su sitio
     oficial: https://www.python.org, para diversos sistemas operativos,
     incluyendo Windows™ y MacOS™.
   - También puede obtenerse la distribución Anaconda™, la cual está
     ya adaptada para el trabajo científico, de la página
     https://www.continuum.io/.
   - En Ubuntu y otras varias distribuciones de Linux, /Python/ viene
     preinstalado.

** Librerías 

  - /Python/ tiene las estructuras de datos básicas, como las listas y
    los enteros. Por ejemplo, en el código anterior se asigna a la
    variable =y= la lista de enteros =[2,3,10,2,4,5]=, que en este
    caso la estamos interpretando como una serie de tiempo.

    #+ATTR_LATEX: :options basicstyle=\footnotesize\ttfamily
    #+BEGIN_SRC ipython :noweb yes :exports code
<<simple01>>
    #+END_SRC

    #+beamer: \pause

  - En /Python/ existen muchísimas librerías que extienden la
    capacidad del lenguaje. Como ejemplo, mencionamos la librería
    =matplotlib= (https://matplotlib.org).

** Python no es difícil

  - En el dibujo anterior hemos demostrado que, aunque /Python/ es
    un lenguaje muy complejo, no es necesario usar toda su complejidad
    para empezar a usarlo.
  - Vamos a dar un ejemplo ligeramente más complicado, el cual nos
    será útil en adelante. Para el propósito de definir la gráfica de
    visibilidad, será conveniente usar barras para indicar los valores
    de la serie de tiempo.

** Histograma

   #+call: inicio-mp(diam="0.485")

   #+name: simple02
   #+ATTR_LATEX: :options basicstyle=\scriptsize\ttfamily
   #+BEGIN_SRC ipython :session :file ./simple02.png :exports both
import matplotlib.pyplot as plt
y=[2,3,10,2,4,5]
plt.grid(True)
plt.bar(range(len(y)),
        y,
        width=0.2,
        align='center')
plt.show()
   #+END_SRC

   #+call: enmedio-mp(ndiam="0.5")

   #+RESULTS[0e40b020f1177d43ab1a00d9b559b6e73a5cec66]: simple02
   [[file:./simple02.png]]

   #+call: final-mp(labl="simple02", capt="")

* Gráficas

** El concepto matemático de gráfica

  - Una *gráfica* \(G\) se compone de
    - un conjunto, denotado con \(V(G)\), a cuyos elementos se les
      llama *vértices*, y de
    - un conjunto de parejas no ordenadas de vértices, denotado con
      \(E(G)\), a cuyos elementos se les llama *aristas*.
  - En las aplicaciones, se le suele llamar a las gráficas *grafos* y
    también *redes* o *redes complejas*. A los vértices se les llega a
    llamar *nodos*.
  - Si los vértices \(v_{1}\), \(v_{2}\) son tales que
    \(\{v_{1},v_{2}\}\in E(G)\), decimos que \(v_{1}\) y \(v_{2}\) son
    *adyacentes*.

** Grado de un vértice

  - Si \(v\) es un vértice de la gráfica \(G\), a la cantidad de aristas
    que contienen a \(v\) se le llama el *grado* de \(v\). La cantidad
    \(\Delta(G)=\max\{\mathrm{grado}(v)\mid v\in V(G)\}\) es el *grado
    máximo* de la gráfica.
  - La sucesión
    \((d_{0},d_{1},\ldots,d_{\Delta(G)})\), donde \(d_{i}\) es la
    cantidad de vértices de \(G\) de grado \(i\), es el *histograma de
    grados* de \(G\).
  - El histograma de grados ha sido empleado como un parámetro que
    permite detectar propiedades de la gráfica \(G\). Existen muchas
    otros parámetros de las gráficas dignos de estudiarse, que se
    pueden consultar en un texto de teoría de gráficas.

** Ejemplo de gráfica

  - Como ejemplo, podemos definir una gráfica \(P\), cuyo conjunto de
    vértices es \(V(P)=\{a,b,c\}\), y cuyo conjunto de aristas es
    \(E(P)=\{\{a,b\},\{b,c\}\}\). 
  - Los vértices \(a\) y \(c\) tienen grado 1, mientras que el vértice
    \(b\) tiene grado \(2\).
  - De este modo, \(\Delta(P)=2\) y el histograma de grados
    es \((0,2,1)\), pues hay cero vértices de grado 0, dos de grado 1
    y uno de grado 2.

** Gráficas en Python

  En la figura se muestra un dibujo de la gráfica \(P\), que definimos
  en el párrafo anterior, hecho con /Python/ y las librerías
  =matplotlib= y =networkx=

   #+call: inicio-mp(diam="0.6")

   #+name: graficav00
   #+ATTR_LATEX: :options basicstyle=\scriptsize\ttfamily
   #+BEGIN_SRC ipython :session :file ./graficav00.png :exports both
import matplotlib.pyplot as plt
import networkx as nx
P=nx.Graph([('a','b'),('b','c')])
nx.draw(P,with_labels=True)
plt.show()
   #+END_SRC

   #+call: enmedio-mp(ndiam="0.385")

   #+RESULTS[7e8510728c4ba47a6ee433d2e1dd43371593e03f]: graficav00
   [[file:./graficav00.png]]

   #+call: final-mp(labl="graficav00", capt="Gráfica $P$")

** Propiedades de gráficas

   #+beamer: \vspace*{5mm}

   Una vez que la gráfica ha sido creada en Python, es posible obtener
   propiedades de la gráfica. Por ejemplo:

   #+BEGIN_SRC ipython :session :exports code
P.nodes()   
   #+END_SRC

   #+RESULTS[a8b41ccc37ae078b2ac6b59a61da4c18b47de20a]:
   | a | c | b |

   #+name: vertices
   #+BEGIN_SRC ipython :session :exports results :results output
print P.nodes()
   #+END_SRC

   produce:

   #+RESULTS[7851ad5f58f2eed03ecfc485c83d5ceae95bd918]: vertices
   : ['a', 'c', 'b']

   #+beamer: \pause
   mientras que:

   #+name: grado
   #+BEGIN_SRC ipython :session :exports both
P.degree('b')
   #+END_SRC

   produce:

   #+RESULTS[03d72212476a7c481217c58e24ae4074eda8177e]: grado
   : 2

** Nuevas funciones en Python

   En =networkx= no existe ya definida una función para calcular el
   grado máximo de una gráfica. Sin embargo, no es difícil obtener tal
   parámetro por medio de una nueva función, digamos =grado_max=, del
   siguiente modo:

   #+BEGIN_SRC ipython :session :exports code
def grado_max(G):
    return max(G.degree(G.nodes()).values())
   #+END_SRC

   #+RESULTS[0f151f5dbdf286ca29f7873d271b706727f09822]:

   y entonces
   #+name: gradomaxfun
   #+BEGIN_SRC ipython :session :exports both
grado_max(P)
   #+END_SRC

   produce:

   #+RESULTS[f9588b7797db04ff11f1634cf938ecdd606f8aeb]: gradomaxfun
   : 2

* Aplicación a la gráfica de visibilidad

** Gráfica de visibilidad 

   - Lacasa y otros introdujeron en 2008 la *gráfica de visibilidad
     asociada a una serie de tiempo* como una herramienta para
     analizar diversas propiedades de la serie.
   - Los autores observan, por ejemplo, que si la serie de tiempo es
     periódica, entonces la gráfica de visibilidad tiene cierta regularidad.
   - Por otro lado, también observan que la gráfica de visibilidad
     permanece invariante bajo ciertos cambios no esenciales de la
     serie de tiempo, como traslación o reescalamientos.

** Adyacencias en la gráfica de visibilidad

   - La gráfica de visibilidad tiene como vértices los datos de la
     serie de tiempo, por lo quepueden tomarse como
     \(V=\{0,1,2,\ldots,n-1\}\).
   - Se declaran adyacentes entre sí aquellos datos tales que, las
     partes superiores de sus barras correspondientes sean "visibles"
     entre sí considerando a las barras como "paredes".
     #+beamer: \pause

   #+call: inicio-mp(diam="0.45")
   
   #+name: barras-adyacentes
   #+BEGIN_SRC ipython :session :file ./barras-adyacentes.png :exports results
import matplotlib.pyplot as plt
y=[2,3,10,2,4,5]
plt.grid(True)
plt.bar(range(len(y)),
        y,
        width=0.2,
        align='center')
plt.plot([0,2],[2,10], lw=4, color='green')
plt.title("0 y 2 son adyacentes", fontsize=20)
plt.show()
   #+END_SRC
   
   #+RESULTS[fd48744feeab964a85485c466795eb1d34992e2c]: barras-adyacentes
   [[file:./barras-adyacentes.png]]

   #+call: enmedio-mp(ndiam="0.45")
   
   #+name: barras-no-adyacentes
   #+BEGIN_SRC ipython :session :file ./barras-no-adyacentes.png :exports results
import matplotlib.pyplot as plt
y=[2,3,10,2,4,5]
plt.grid(True)
plt.bar(range(len(y)),
        y,
        width=0.2,
        align='center')
plt.plot([3,5],[2,5], lw=4, color='red')
plt.title("3 y 5 NO son adyacentes", fontsize=20)
plt.show()
   #+END_SRC
   
   #+RESULTS[deababa4955fa136760908bdcfc802e684b5f94c]: barras-no-adyacentes
   [[file:./barras-no-adyacentes.png]]
   
   #+call: final-mp(labl="adyacentes", capt="")

** 

   #+beamer: \vspace*{0.4cm}
   
   Es inmediato entonces determinar la lista completa de las aristas
   de la gráfica de visibilidad de la serie de tiempo
   =[2,3,10,2,4,5]=, y usando =networkx=, realizar un dibujo de la
   gráfica. 

   #+ATTR_LATEX: :width 4cm
   [[file:simple02.png]]

   #+beamer: \vspace*{-0.72cm}

   #+call: inicio-mp(diam="0.385")

   #+name: grafica01
   #+ATTR_LATEX: :options basicstyle=\tiny\ttfamily
   #+BEGIN_SRC ipython :session :file ./grafica01.png :exports both
import networkx as nx
import matplotlib.pyplot as plt
G=nx.Graph([(0,1),(0,2),(1,2),
            (2,3),(2,4),(2,5),
            (3,4),(4,5)])
nx.draw(G,with_labels=True)
plt.show()
   #+END_SRC

   #+call: enmedio-mp(ndiam="0.6")

   #+RESULTS[a9739243f9836b683766704e76d2fbc716658278]: grafica01
   [[file:./grafica01.png]]

   #+call: final-mp(labl="grafica01", capt="")

** Definición formal de la gráfica de visibilidad
   
   Los datos \((t_{a},y_{a})\), \((t_{b},y_{b})\) se declaran
   adyacentes en la gráfica de visibilidad siempre y cuando se tenga
   que para todos los \(t_{c}\) con \(t_{a}<t_{c}<t_{b}\) se cumple
   que:
   \begin{equation*}
   y_{c}<y_{b}+(y_{a}-y_{b})\frac{t_{b}-t_{c}}{t_{b}-t_{a}}.
   \end{equation*}

** Función de visibilidad

   En /Python/, podemos definir una función que determine si, dada una
   serie de tiempo y dos datos, tales datos son adyacentes en la
   gráfica de visibilidad de la serie de tiempo. 

   La función =is_visible= regresa =True= si los datos =a=, =b= son
   adyacentes y =False= si no.

   #+name: adyacencia
   #+attr_latex: :options basicstyle=\footnotesize\ttfamily
   #+BEGIN_SRC ipython :session :exports code
def is_visible(y,a,b):
    isit = True
    c = a+1
    while isit and c < b:
        isit = y[c]<y[b]+(y[a]-y[b])*((b-c)/float(b-a))
        c = c+1
    return isit
   #+END_SRC

   #+RESULTS[e109d6118b51b78ddf2e44fee3676dc3efb4a7e0]: adyacencia

** Función de gráfica de visibilidad

   Se usa la función =is_visible= anterior.

   #+beamer: \bigskip

   #+name: gravisibilidad
   #+BEGIN_SRC ipython :session :exports code
def visibility_graph(ts):
    eds = []
    for a in range(len(ts)):
        for b in range(a+1,len(ts)):
            if is_visible(ts,a,b):
                eds.append((a,b))
    return nx.Graph(eds)
   #+END_SRC

   #+RESULTS[00b727796470957c96df25fb3e15392d6f4106b4]: gravisibilidad

** Varios tipos de gráficas de visibilidad

   - Recientemente se han definido, (y estudiado y aplicado) variantes
     de la gráfica de visibilidad, como:
     - la gráfica de visibilidad horizontal,
     - la gráfica de visibilidas con pesos,
     - la gráfica de visibilidad paramétrica. 

   - El código que hemos presentado podría adaptarse sin muchos
     problemas para considerar las otras definiciones de visibilidad.

   - En la siguiente sección aplicaremos este código a una serie de
     tiempo mucho más complicada.

* El mapeo logístico

** Serie de tiempo por iteraciones

  - Una manera sencilla de obtener una serie de tiempo en un conjunto de
    números reales \(X\), es por medio de las iteraciones de una función
    \(f\colon X\to X\).
  - Para construir una serie de tiempo de tal modo, se toma una
    condición inicial \(x_{0}\in X\), y los datos subsiguientes se
    definen recursivamente para \(t>0\) como \(x_{t}=f(x_{t-1})\).
  - Uno de las casos más estudiados, es el *mapeo logístico*, en el cual
    se toma \(X=[0,1]\), es decir, el intervalo de números reales entre
    \(0\) y \(1\), y la función \(f(x)=\mu x(1-x)\), donde \(\mu\)
    satisface \(0\leq \mu\leq 4\).
  - Se sabe que
    para ciertos valores de \(\mu\) las iteraciones muestran el fenómeno
    de *caos*.

** Serie de tiempo del mapeo logístico

  Se dibuja la serie de tiempo obtenida con condición inicial
  \(x_{0}=0.3\), valor del parámetro \(\mu=3.8\), y con 50
  iteraciones. En este caso, la serie de tiempo queda guardada en una
  lista llamada =vals=.

   #+call: inicio-mp(diam="0.385")

   #+name: logistico01
   #+ATTR_LATEX: :options basicstyle=\tiny\ttfamily
   #+BEGIN_SRC ipython :session :file ./logistico01.png :exports both
import matplotlib.pyplot as plt
def f(x):
    return 3.8*x*(1-x)
vals=[0.3]
iteraciones=50
for i in range(iteraciones):
    new = vals[-1]
    vals.append(f(new))
plt.figure(figsize=(10,5))
plt.axis([-1,iteraciones+1,0,1])
plt.grid(True)
plt.bar(range(len(vals)),
        vals,
        width=0.2,
        align='center')
plt.show()
   #+END_SRC

   #+call: enmedio-mp(ndiam="0.6")

   #+RESULTS[9a590d7428a1d3c7d80418eb6d18c37eb45758cd]: logistico01
   [[file:./logistico01.png]]

   #+call: final-mp(labl="logistico01", capt="")

** Gráfica de la serie de tiempo logística

   Se puede ahora utilizar la lista =vals= para obtener la gráfica de
   visibilidad de la serie de tiempo que se originó con las
   iteraciones del mapeo logístico.

   #+call: inicio-mp(diam="0.3")

   #+name: graficav01
   #+ATTR_LATEX: :options basicstyle=\tiny\ttfamily
   #+BEGIN_SRC ipython :session :file ./graficav01.png :exports both
import matplotlib.pyplot as plt
import networkx as nx

G=visibility_graph(vals)
nx.draw(G,
        with_labels=True)
plt.show()
   #+END_SRC

   #+call: enmedio-mp(ndiam="0.685")

   #+RESULTS[968853b9eb5fb03e6e62a8883d4cc66e25e03a45]: graficav01
   [[file:./graficav01.png]]

   #+call: final-mp(labl="graficav01", capt="")

** Histograma de grados

   #+call: inicio-mp(diam="0.385")

   #+name: histograma01
   #+ATTR_LATEX: :options basicstyle=\tiny\ttfamily
   #+BEGIN_SRC ipython :session :file ./histograma01.png :exports both
import numpy as np 
degs = list(G.degree().values())
dmax=max(degs)
bins = np.arange(dmax) - 0.5
plt.xlim(xmin=-1)
plt.hist(degs,bins)
plt.xticks(range(dmax))
plt.xlabel(
    u"Grados de los vértices")
plt.ylabel(
    u"Cantidad de vértices")
plt.grid(True)
plt.show()
   #+END_SRC

   #+call: enmedio-mp(ndiam="0.6")

   #+RESULTS[db02291a1530f50384531ac37dc564c28c294a68]: histograma01
   [[file:./histograma01.png]]

   #+call: final-mp(labl="histograma01", capt="")

* Conclusión

** Fin

   Los autores del presente trabajo estudiarán en el futuro el efecto
   de perturbaciones en series de tiempo que provienen de fenómenos
   biológicos, por medio de las herramientas aquí expuestas.


* COMMENT Gráfica aleatoria

  Queremos ahora comparar el histograma de grados anterior con el de
  una gráfica con la misma cantidad de vértices y la misma cantidad de
  aristas, donde cada arista está añadida aleatoriamente.

  La cantidad de vértices y aristas de la gráfica =G=,

  #+name: cantidad-aristas
  #+BEGIN_SRC ipython :session :exports both
n=G.order()
m=G.size()
n,m
  #+END_SRC

  es, respectivamente:

  #+RESULTS[c3358a2d14a9bcc6ad1fa6efb575c01bf59f3138]: cantidad-aristas
  | 101 | 208 |

  #+BEGIN_SRC ipython :session :exports code
H=nx.gnm_random_graph(n, m)
  #+END_SRC

  #+RESULTS[965042d11c85c13cefa4106143043d1e3e683c6f]:

  Comprobemos:

  #+name: cantidad-aristas-2
  #+BEGIN_SRC ipython :session :exports both
H.order(),H.size()
  #+END_SRC

  es, respectivamente:

  #+RESULTS[085862caaf52e2a650d1164f7c615f7418b5f5d6]: cantidad-aristas-2
  | 101 | 208 |

  En la figura \ref{graficav02} se muestra un dibujo de la gráfica aleatoria.
  
  #+call: inicio-mp(diam="0.5")

   #+name: graficav02
   #+BEGIN_SRC ipython :session :file ./graficav02.png :exports both
import matplotlib.pyplot as plt
import networkx as nx
nx.draw(H,with_labels=True)
plt.show()
   #+END_SRC

   #+call: enmedio-mp(ndiam="0.45")

   #+RESULTS[139dac5a59586a6abd930aff55e39e4ff331007b]: graficav02
   [[file:./graficav02.png]]

   #+call: final-mp(labl="graficav02", capt="Gráfica aleatoria")

   Finalmente, en la figura \ref{histograma03} se muestra el
   histograma de grados de la gráfica aleatoria.

   #+call: inicio-mp(diam="0.5")

   #+name: histograma03
   #+BEGIN_SRC ipython :session :file ./histograma03.png :exports both
import numpy as np 
degs = list(H.degree().values())
dmax=max(degs)
bins = np.arange(dmax) - 0.5
plt.xlim(xmin=-1)
plt.hist(degs,bins)
plt.xticks(range(dmax))
plt.xlabel(
    u"Grados de los vértices")
plt.ylabel(
    u"Cantidad de vértices")
plt.grid(True)
plt.show()
   #+END_SRC

   #+call: enmedio-mp(ndiam="0.45")

   #+RESULTS[8b89892ae44b16ec58291ce3ef8aadf1a0ad3cfd]: histograma03
   [[file:./histograma03.png]]

   #+call: final-mp(labl="histograma03", capt="Histograma de grados")


[[bibliographystyle:apalike]]
[[bibliography:series.bib]]

* COMMENT Ejemplos finales

** COMMENT Leer un texto de datos

   Gráfica de los primeros datos

   #+BEGIN_SRC ipython :session :file ./datos01.png :exports both
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np

def read_ts_file(nam):
    f=open(nam)
    vals=[]
    for line in f:
        vals.append(line)
    vals=[float(x) for x in vals]
    #1vals=vals[:10000]
    return visibility_graph(vals)

G=read_ts_file("MJNNVIGILOS_C3_183.txt")
degs = list(G.degree().values())
dmax=max(degs)
bins = np.arange(dmax) - 0.5
plt.xlim(xmin=-1)
plt.hist(degs,bins)
plt.xticks(range(dmax))
plt.xlabel(
    u"Grados de los vértices")
plt.ylabel(
    u"Cantidad de vértices")
plt.grid(True)
plt.show()
   #+END_SRC

   #+RESULTS:
   [[file:./datos01.png]]


   #+name: histograma02
   #+BEGIN_SRC ipython :session :file ./histograma02.png :exports both
import numpy as np
degs = list(G.degree().values())
dmax=max(degs)
bins = np.arange(dmax) - 0.5
plt.xlim(xmin=-1)
plt.hist(degs,bins)
plt.xticks(range(dmax))
plt.xlabel(
    u"Grados de los vértices")
plt.ylabel(
    u"Cantidad de vértices")
plt.grid(True)
plt.show()
   #+END_SRC

* COMMENT Fechas

   #+call: inicio-mp(diam="0.5")

   #+name: final01
   #+BEGIN_SRC ipython :session :file ./final01.png :exports both
import matplotlib.pyplot as plt
import datetime
import numpy as np

x = np.array([datetime.datetime(2017, 6, i) for i in range(1,7)])
y = np.random.randint(10, size=x.shape)

plt.grid(True)
plt.plot(x,y)
plt.show()
   #+END_SRC

   #+call: enmedio-mp(ndiam="0.45")

   #+RESULTS: final01

   #+call: final-mp(labl="final01", capt="Ejemplo final")

* Hidden code                                                      :noexport:

  #+name: inicio-mp
  #+BEGIN_SRC emacs-lisp :var diam="0.4" :results latex
(concat "\\begin{center}\n"
  "\\begin{minipage}{"
  diam
  "\\linewidth}\n"
  )
  #+END_SRC

  #+name: enmedio-mp
  #+begin_src emacs-lisp :var ndiam="0.4" :results latex
(concat "\\end{minipage}\n"
   "\\begin{minipage}{"
   ndiam
   "\\linewidth}")
  #+end_src

  #+name: final-mp
  #+begin_src emacs-lisp :var capt="Mi figura" labl="fig:1" :results latex
(concat "\\end{minipage}\n"
   "\\caption{"
   capt
   "}\n"
   "\\label{"
   labl
   "}\n"
   "\\end{center}\n"
   )
  #+end_src

#+BEGIN_SRC emacs-lisp
(org-ref-find-bibliography)
#+END_SRC

#+RESULTS:
: series.bib

#+BEGIN_SRC emacs-lisp
(ox-ipynb-export-to-ipynb-file)
#+END_SRC

* Things to do                                                     :noexport:
  - la presentación
  - regresar a versiones anteriores de scimax-ox-ipynb.el para ver en
    cual exporta bien.


* COMMENT Local Variables

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
